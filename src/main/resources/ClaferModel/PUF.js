scope({c0_Devices:2, c0_Enum:4, c0_FileMode:2, c0_Metric:3, c0_description:3, c0_devices:3, c0_fileMode:3});
defaultScope(1);
intRange(-8, 7);
stringLength(44);

c0_Enum = Abstract("c0_Enum");
c0_Devices = Abstract("c0_Devices");
c0_Single = Clafer("c0_Single").withCard(1, 1);
c0_Multiple = Clafer("c0_Multiple").withCard(1, 1);
c0_FileMode = Abstract("c0_FileMode");
c0_File = Clafer("c0_File").withCard(1, 1);
c0_Folder = Clafer("c0_Folder").withCard(1, 1);
c0_Metric = Abstract("c0_Metric");
c0_description = c0_Metric.addChild("c0_description").withCard(1, 1);
c0_fileMode = c0_Metric.addChild("c0_fileMode").withCard(1, 1);
c0_devices = c0_Metric.addChild("c0_devices").withCard(1, 1);
c0_Task = Abstract("c0_Task");
c1_description = c0_Task.addChild("c1_description").withCard(1, 1);
c0_Hamming_Distance = Clafer("c0_Hamming_Distance").withCard(1, 1);
c0_Intra_HD = Clafer("c0_Intra_HD").withCard(1, 1);
c0_Inter_HD = Clafer("c0_Inter_HD").withCard(1, 1);
c0_PUFToolkit = Clafer("c0_PUFToolkit").withCard(1, 1);
c0_metric = c0_PUFToolkit.addChild("c0_metric").withCard(1, 1);
c0_Devices.extending(c0_Enum).refToUnique(Int);
c0_Single.extending(c0_Devices);
Constraint(implies(some(global(c0_Single)), equal(joinRef(global(c0_Single)), constant(1))));
c0_Multiple.extending(c0_Devices);
Constraint(implies(some(global(c0_Multiple)), equal(joinRef(global(c0_Multiple)), constant(2))));
c0_FileMode.extending(c0_Enum).refToUnique(Int);
c0_File.extending(c0_FileMode);
Constraint(implies(some(global(c0_File)), equal(joinRef(global(c0_File)), constant(1))));
c0_Folder.extending(c0_FileMode);
Constraint(implies(some(global(c0_Folder)), equal(joinRef(global(c0_Folder)), constant(2))));
c0_description.refToUnique(string);
c0_fileMode.refToUnique(c0_FileMode);
c0_devices.refToUnique(c0_Devices);
c1_description.refToUnique(string);
c0_Hamming_Distance.extending(c0_Metric);
c0_Hamming_Distance.addConstraint(equal(joinRef(join($this(), c0_description)), constant("\"hamming distance\"")));
c0_Hamming_Distance.addConstraint(or(equal(joinRef(join($this(), c0_fileMode)), global(c0_File)), equal(joinRef(join($this(), c0_fileMode)), global(c0_Folder))));
c0_Hamming_Distance.addConstraint(equal(joinRef(join($this(), c0_devices)), global(c0_Single)));
c0_Intra_HD.extending(c0_Metric);
c0_Intra_HD.addConstraint(equal(joinRef(join($this(), c0_description)), constant("\"Intra Hamming Distance\"")));
c0_Intra_HD.addConstraint(equal(joinRef(join($this(), c0_fileMode)), global(c0_Folder)));
c0_Intra_HD.addConstraint(equal(joinRef(join($this(), c0_devices)), global(c0_Multiple)));
c0_Inter_HD.extending(c0_Metric);
c0_Inter_HD.addConstraint(equal(joinRef(join($this(), c0_description)), constant("\"Inter Hamming Distance\"")));
c0_Inter_HD.addConstraint(equal(joinRef(join($this(), c0_fileMode)), global(c0_Folder)));
c0_Inter_HD.addConstraint(equal(joinRef(join($this(), c0_devices)), global(c0_Multiple)));
c0_PUFToolkit.extending(c0_Task);
c0_PUFToolkit.addConstraint(equal(joinRef(join($this(), c1_description)), constant("\"Evaluation and Assessment of PUF responses\"")));
c0_metric.refToUnique(c0_Metric);
